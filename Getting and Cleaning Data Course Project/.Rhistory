Age < 15 ~ "Under 15",
Age >= 15 & Age <= 50 ~ "15 to 50",
Age > 50 ~ "Over 50"
)) %>% factor(levels = c("Under 15", "15 to 50", "Over 50"))
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat= case_when(
Age < 15 ~ "Under 15",
Age >= 15 & Age <= 50 ~ "15 to 50",
Age > 50 ~ "Over 50"
)) %>% factor(c("Under 15", "15 to 50", "Over 50"))
submit()
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat= case_when(
Age < 15 ~ "Under 15",
Age >= 15 & Age <= 50 ~ "15 to 50",
Age > 50 ~ "Over 50"
))
View(titanic_3)
submit()
skip()
View(titanic_3)
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50")))
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>% group_by(Pclass, agecat, Sex)
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>% group_by(Pclass, agecat, Sex)%>%summarize(N = n(), survivors = count(Survived))
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>% group_by(Pclass, agecat, Sex)%>%summarize(N = n(), survivors = count(Survived))
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>% group_by(Pclass, agecat, Sex)%>%summarize(N = n(), survivors = sum(Survived))
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(), survivors = sum(Survived)) %>% mutate(perc_survived = survivors/N)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(), survivors = sum(Survived)) %>% mutate(perc_survived = sum(survivors/N))
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(), survivors = sum(Survived))
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(), survivors = sum(Survived))
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(), survivors = sum(Survived)) %>% mutate(perc_survived = survivors/N)
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(), survivors = sum(Survived)) %>%
mutate(perc_survived = survivors/N)
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(), survivors = sum(Survived)) %>%
mutate(perc_survived = round(survivors/N,6)
titanic %>%
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(), survivors = sum(Survived)) %>%
mutate(perc_survived = round(survivors/N,6))
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(), survivors = sum(Survived)) %>%
mutate(perc_survived = round(survivors/N,6))
submit()
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
groups(Pclass, agecat, Sex) %>%
summarize(N = n(), survivors = sum(Survived)) %>%
mutate(perc_survived = survivors/N)
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
groups(Pclass, agecat, Sex) %>%
summarize(N = n(), survivors = sum(Survived)) %>%
mutate(perc_survived = survivors/N)
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass, agecat, Sex) %>%
summarize(N = n(), survivors = sum(Survived)) %>%
mutate(perc_survived = survivors/N)
submit()
submit()
submit()
skip()
2
exit()
?
+
1
help()
skip()
?swirl
info()
main()
library(reader)
library(readr)
datapath
print(datapath)
file.path(datapath)
datafile <- file.path(datapath,'urban.csv.gz')
urban <- read_csv(datafile)
head(urban)
urban <- read_csv(datafile)['zcta5']
urban <- read_csv(datafile,col_types = 'cccc')
urban <- read_csv(datafile,col_types = 'ccc')
urban <- read_csv(datafile,col_types = 'cccdc')
urban <- read_csv(datafile,col_types = 'cccd-')
head(urban)
head(urban,100)
head(urban,n_max=100)
urban <- read_csv(datafile,col_types = 'cccd-',n_max=100)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plans)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants,15)
summarize(plants)
summary(plants)
table(plants$Active_Growth_Period)
str(
)
str()
str(plants)
setClass("bus_S4",
slots = list(n_seats = "numeric",
top_speed = "numeric",
current_speed = "numeric",
brand = "character"))
setClass("party_bus_S4",
slots = list(n_subwoofers = "numeric",
smoke_machine_on = "logical"),
contains = "bus_S4") #bus_s4 is the super class of part_bus_s4
my_bus <- new("bus_S4", n_seats = 20, top_speed = 80,
current_speed = 0, brand = "Volvo")
my_bus
my_party_bus <- new(n_subwoofers = 2, smoke_machine_on = FALSE)
my_party_bus <- new('party_bus_S4',n_subwoofers = 2, smoke_machine_on = FALSE)
my_party_bus
my_party_bus <- new("party_bus_S4", n_seats = 10, top_speed = 100,
current_speed = 0, brand = "Mercedes-Benz",
n_subwoofers = 2, smoke_machine_on = FALSE)
my_party_bus
my_bus@n_seats
setGeneric("is_bus_moving", function(x){
standardGeneric("is_bus_moving")
})
setMethod('is_bus_moving', c=(x='bus_S4','party_bus_S4'),function(x){x@current_speed>0})
setMethod('is_bus_moving', c=(x='bus_S4'),function(x){x@current_speed>0})
setMethod('is_bus_moving', c(x='bus_S4'),function(x){x@current_speed>0})
my_bus.is_bus_moving()
is_bus_moving(my_bus)
is_bus_moving(my_party_bus)
my_bus@current_speed <- 1
is_bus_moving(my_bus)
setMethod("print",
c(x = "bus_S4"),
function(x){
paste("This", x@brand, "bus is traveling at a speed of", x@current_speed)
})
print(my_bus)
rm('print')
print('hello world')
print(my_bus)
Student <- setRefClass("Student",
fields = list(name = "character",
grad_year = "numeric",
credits = "numeric",
id = "character",
courses = "list"),
methods = list(
hello = function(){
paste("Hi! My name is", name)
},
add_credits = function(n){
credits <<- credits + n
},
get_email = function(){
paste0(id, "@jhu.edu")
}
))
Student
brook <- Student$new("Brook",2019,40,'ba123',list("Ecology", "Calculus III"))
brook
brooke <- Student$new(name = "Brooke", grad_year = 2019, credits = 40,
id = "ba123", courses = list("Ecology", "Calculus III"))
rm('brook')
brooke
list("Ecology", "Calculus III")
c("Ecology", "Calculus III")
c <- c("Ecology", "Calculus III")
l <- list("Ecology", "Calculus III")
l[1]
c[1]
a <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
a
a_inv <- solve(a)
a_inv
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# This function creates a special "matrix" object that can cache its inverse.
# x is a matrix object
# return a list containing the special matrix and its inverse
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(
set = set, get = get,
setsolve = setsolve,
getsolve = getsolve
)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## his function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
m <- x$getsolve()
if (!is.null(m)) {
message("getting inversed data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
x <- matrix(1:10, ncol = 2)
makeCacheMatrix(x)
cacheSolve(x)
x
y = makeCacheMatrix(x)
cacheSolve(y)
y
y$getsolve()
y$get()
cacheSolve(y)
x <- matrix(1:16, ncol = 4, nrow = )
x <- matrix(1:16, ncol = 4, nrow = 4)
y = makeCacheMatrix(x)
cacheSolve(y)
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# This function creates a special "matrix" object that can cache its inverse.
# x is a matrix object
# return a list containing the special matrix and its inverse
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(
set = set, get = get,
setsolve = setsolve,
getsolve = getsolve
)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
m <- x$getsolve()
if (!is.null(m)) {
message("getting inversed data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
setinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached inverse")
return(inv)
}
m <- x$get()
inv <- solve(m, ...)
x$setinv(inv)
inv
}
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# Initialize inverse matrix as NULL
inv <- NULL
# Function to set the matrix and reset the inverse
set <- function(y) {
x <<- y
inv <<- NULL
}
# Function to get the current matrix
get <- function() x
# Function to set the inverse matrix
setInverse <- function(inverse) inv <<- inverse
# Function to get the inverse matrix
getInverse <- function() inv
# Return a list of functions
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# Check if the inverse is already cached
inv <- x$getInverse()
if (!is.null(inv)) {
# If cached, print a message and return the cached inverse
message("getting cached data")
return(inv)
}
# If not cached, calculate the inverse
mat <- x$get()
inv <- solve(mat, ...)
# Cache the calculated inverse
x$setInverse(inv)
# Return the calculated inverse
inv
}
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
## Implements caching for matrix inversion by using a special
## matrix object
## Testing out the functions:
## > source("cachematrix.R")
## > m <- makeCacheMatrix()
## > m$get()
## > m$set(matrix(1:4, 2, 2))
## > m$get()
## > cacheSolve(m)
## > cacheSolve(m)
## Creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inv) i <<- inv
getinverse <- function() i
list (set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Computes the inverse of the special "matrix" returned by
## makeCacheMatrix above
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)){  ## if inverse is found in cache
message("getting cached data")
return(i)       ## return cached inverse, skips computation
}
data <- x$get()
i <- solve(data, ...) ## computes the inverse
x$setinverse(i)       ## sets the inverse in cache
i
}
m <- matrix(rnorm(16),4,4)
m1 <- makeCacheMatrix(m)
cacheSolve(m1)
x=1:10000000001
sum(x\)
sum(x)
x
x
getwd()
setwd("//192.168.68.125/Documents/Learning/Coursera_R_Assignments/Getting and Cleaning Data Course Project")
setwd("//192.168.68.125/Documents/Learning/Coursera_R_Assignments/Getting and Cleaning Data Course Project")
getwd()
