x<-rnorm(100)
hist(x)
x<-rnorm(1000)
hist(x)
rm(x)
x<-rnorm(100)
y<-rnorm(100)
plot(x,y)
z<-rnorm(100)
plot(x,z)
plot(x,y)
par("margin")
par(mar)
par("mar")
par(mar=c(2,2,2,2))
plot(x,y)
par(mar=c(4,4,2,2))
plot(x,y)
plot(x,y, pch=20)
plot(x,y, pch=19)
plot(x,y, pch=2)
plot(x,y, pch=3)
plot(x,y, pch=4)
example("points")
plot(x,y, pch=2)
x<-rnorm(100)
y<-rnorm(100)
x<-rnorm(100)
plot(x,y, pch=2)
plot(x,y, pch=20)
title("Scatterplot")
text((-2,-2), "Label")
text(-2,-2, "Label")
?legend()
legend("topleft",legend = "Data", pch = 20)
fit <- lm(y~x)
abline(fit)
abline(fit, lwd=3)
abline(fit, lwd=3, col="blue")
plot(x, y, xlab = "weight", ylab = "height", main = "Scatterplot", pch=20)
legend("topright",legend = "Data", pch = 20)
fit <- lm(y~x)
abline(fit, lwd=3, col="red")
z<- rpois(100,2)
par(mfrow = c(2,1))
plot(x,y, pch=20)
plot(x,z, pch=20)
par(mar=c(2,2,1,1))
plot(x,y, pch=20)
plot(x,y, pch=20)
par(mfrow=c(1,1))
x <- rnorm(100)
y <- x + rnorm(100)
x
y
?gl
gl(2,1)
gl(2, 8, labels = c("Control", "Treat"))
g<-gl(2,50, labels = c("Male", "Female"))
plot(x, y, type="n")
points(x[g=="Male"], y[g=="Male"], col="green")
points(x[g=="Female"], y[g=="Female"], col="blue")
points(x[g=="Female"], y[g=="Female"], col="blue", pch=19)
library(swirl)
swirl()
swirl()
install_course("Exploratory_Data_Analysis")
swirl()
qplot(data~dispal, why, data=mpg. geom=c("point","smoth"),facets=.~drv)
qplot(data~dispal, why, data=mpg. geom=c("point","smooth"),facets=.~drv)
qplot(data~dispal, hwy, data=mpg. geom=c("point","smooth"),facets=.~drv)
qplot(dispal, hwy, data=mpg. geom=c("point","smooth"),facets=.~drv)
qplot(displ, hwy, data=mpg. geom=c("point","smooth"),facets=.~drv)
qplot(displ, hwy, data=mpg. geom=c("point","smooth"),facets= .~drv)
qplot(displ, hwy, data=mpg, geom=c("point","smooth"),facets= .~drv)
g<-qplot(mpg,displ, hwy)
g<-qplot(mpg,aes(displ, hwy))
g <- ggplot(mpg,aes(displ, hwy))
g
summary(g)
g+geom_point()
g + geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = 'lm')
g+geom_point()+geom_smooth(method = 'lm')+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = 'lm')+facet_grid(.~drv)+ggtitle("Swril Rules")
g+geom_point()+geom_smooth(method = 'lm')+facet_grid(.~drv)+ggtitle("Swril Rules!")
g+geom_point()+geom_smooth(method = 'lm')+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(col='pink',size=4,alpha=1/2)+geom_smooth(method = 'lm')+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(col='pink',size=4,alpha=1/2)
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2, aes(color=div))
g+geom_point(size=4,alpha=1/2, aes(color=dir))
g+geom_point(size=4,alpha=1/2, aes(color=drv))
g+geom_point(size=4,alpha=1/2, color=drv)
g+geom_point(size=4,alpha=1/2, color=aes(color=drv))+labs(title = "Swirl Rules!")+labs(x="Displacement", y='Hwy Mileage')
g+geom_point(size=4,alpha=1/2, aes(color=drv))+labs(title = "Swirl Rules!")+labs(x="Displacement", y='Hwy Mileage')
g+geom_point( aes(color=drv))+labs(title = "Swirl Rules!")+labs(x="Displacement", y='Hwy Mileage')
g+geom_point(aes(color=drv),size=2, alpha=1/2)+geom_smooth(size=2, linetype=3, method="lm")
g+geom_point(aes(color=drv),size=2, alpha=1/2)+geom_smooth(size=2, linetype=3, method="lm", se=FLSE)
g+geom_point(aes(color=drv),size=2, alpha=1/2)+geom_smooth(size=2, linetype=3, method="lm", se=FLASE)
g+geom_point(aes(color=drv),size=2, alpha=1/2)+geom_smooth(size=2, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv),size=2, alpha=1/2)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv),size=2, alpha=1/2)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)+theme_bw(base_family = 'Times')
g+geom_point(aes(color=drv))+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)+theme_bw(base_family = "Times")
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
plot(myx, myy, type='l', ylim=c(-3,3))
plot(myx, myy, type='l'))
plot(myx, myy, type='l')
plot(myx, myy, type='l', ylim=c(-3,3))
g<-ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(xlim=-3,ylim=3)
g+geom_line()+coord_cartesian(ylim=c(-3,3)
)
g<-ggplot(mpg, aes(x=myx, y=myy, color=factor(year)))
g<-ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g+geom_point()
g+geom_line()
g+geom_point()
g+geom_point()+facet_grid(drv~cy, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = 'lm',se=FALSE, size=2, color='black')
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = 'lm',se=FALSE, size=2, color='black') +labs(x='Displacement',y='Highway Mileage', titl='Swirl Rules!')
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = 'lm',se=FALSE, size=2, color='black') +labs(x='Displacement',y='Highway Mileage', title ='Swirl Rules!')
swirl()
str(dimonds)
str(diamonds)
hist(diamonds)
qplot(price, diamonds)
qplot(price, diamonds)
qplot(x=price, data=diamonds)
range(diamonds$price)
qplot(x=price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(x=price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(x=price, data=diamonds, geom='density')
qplot(x=price, data=diamonds, geom='density', color=cut)
qplot(x=carat, y=price, data=diamonds)
qplot(x=carat, y=price, data=diamonds, shape=cut)
qplot(x=carat, y=price, data=diamonds, color=cut)
qplot(x=carat, y=price, data=diamonds, color=cut, geom_smooth(method='lm'))
qplot(x=carat, y=price, data=diamonds, color=cut, geom_smooth(method="'lm'"lm))
qplot(x=carat, y=price, data=diamonds, color=cut, geom_smooth(method="lm"))
qplot(x=carat, y=price, data=diamonds, color=cut, method="lm")
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")+facet_grid(tilde~symbol)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")+facet_grid(.~cut)
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) +
| geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g<-ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,lengh=4),na.rm = TRUE)
cutpoints <- quantile(diamonds$carat,seq(0,1,lengh=4),na.rm=TRUE)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE) at the
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat, cutpoints)
g<-ggplot(diamonds, aes(depth, price))
g+geom_point(alpha=1/3)+facet_grid(cut~cur2)
g+geom_point(alpha=1/3)+facet_grid(cut ~ cur2)
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)
diamond[myd,]
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~cur2)+geom_smooth(method='lm',size=3, color='pink')
g+geom_point(alpha=1/3)+geom_smooth(method='lm',size=3, color='pink')+facet_grid(cut~cur2)
g+geom_point(alpha=1/3)+geom_smooth(method='lm',size=3, color='pink')+facet_grid(cut~car2)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method='lm',size=3, color='pink')
ggplot(diamonds,aes(caray, price)) + geom_boxplot()
ggplot(diamonds,aes(carat, price)) + geom_boxplot()
ggplot(diamonds,aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
gc()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(ggplot2movies)
install.packages('ggplot2movies')
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
g
print(g)
g+geom_point()
plot(votes, rating, data = movies)plot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, smooth = "loess") + geom_point()
qplot(votes, rating, data = movie)+ stats_smooth("loess") + geom_point()
qplot(votes, rating, data = movies)+ stats_smooth("loess") + geom_point()
qplot(votes, rating, data = movies)+geom_smooth() + geom_point()
swirl()
swirl()
library(swirl)
library(swirl)
swirl()
cx
cy
cmat
points(cx,cy, col=c('red','orange','purple',pch=3,cex=2,lwd=2))
points(cx,cy, col=c('red','orange','purple'),pch=3,cex=2,lwd=2))
points(cx,cy, col=c('red','orange','purple'),pch=3,cex=2,lwd=2)
mdist
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
newClust
points(x,y)
points(x,y, pch=19)
points(x,y, pch=19)
points(x,y, pch=19, cex=2, col=col1[newClust])
points(x,y, pch=19, cex=2, col=cools1[newClust])
points(x,y, pch=19, cex=2, col=cols1[newClust])
points(x,y)
plot.new()
points(x,y)
points(x,y, pch=19, cex=2, col=cols1[newClust])
swirl()
cmat
points(cx,cy, col=c('red','orange','purple'),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y, pch=19, cex=2, col=cols1[newClust])
tapply(x, mean
)
?tappl
?tapply()
groups<-as.factor(rbinom(32,n=5,prob = 0.4))
groups
tapply(groups,groups,mean())
tapply(groups,groups,mean
)
tapply(groups,groups,length)
x
newClust
tapply(x, newClust,mean)
tapply(y, newClust,mean)
cols``
cols1
points(newCx, newCy, col=cols1,pch=8, cex=2, lwd=2)
mdis(x,y,newCx, newCy)
mdist(x,y, newCx, newCy)
apply(distTmp2,2, which.min)
points(x,y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex-2, lwd-2)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame,3)
kmObj
kmObj$iter
kmObj$cluster
plot(x,y, col=kmObj$cluster, pch=19, cex=2)
kmObj$centers
plot(kmObj$centers,colo=c('black','red','green'), pch=3, cex=2, lwd=3)
plot(kmObj$centers,col=c('black','red','green'), pch=3, cex=2, lwd=3)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x,y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x,y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit('addPatt.R')
rep(1)
rep(c(0,3))
rep(c(0,3), each=5)
source('addPatt.R', local = TRUE)
heatmap(dataMatrix)
mat
svd(mdt)
svd(mat)
matu%*%diag
diag %*% t(matv)
matu %*% diag %*% t(matv)
mat
scale(mat)
svd(scale(mat))
scale(mat)
prcomp(scale(mat))
svd
1
svd1
svd1$v
svd1$v[,1]
svd1$d
head(constantMatrix)
sdv2
sdv2svd2
svd2
svd2$d
svd2
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd1$
u
a1 <- (svd1$u[,1] * svd1[1]) %*% t(svd1$u[,1] * svd1[1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] * svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2]
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
library(swirl)
swirl()
dim(ssd)
names(ssd)[:2]
names(ssd)[,:2]
names(ssd)
names(ssd)[-2]
names(ssd)[562:563]
names(ssd[562:563])
table(ssd$subject)
table(ssd$subject)
names(ssd[562:563])[1]
table(ssd$subject)
table(ssd$subject)[1]
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- ssd[ssd$subject == 1]
ssd[ssd$subject == 1]
len(table(ssd$subject))
length(table(ssd$subject))
dim(table(ssd$subject))
ssd$subject == 1]
ssd$subject == 1
sum(ssd$subject == 1)
sub1 <1 subset(ssd, subject ==1 )
sub1 <- subset(ssd, subject ==1 )
dim(sub1)
names(sub1[1:12])
myedit('showXY.R')
showMe()
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering<- hclust(mdist)
plot(hclustering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
mdist
hcluster(mdist)
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
svd1$u
dim(svd1$u)
maxCon <- apply(svd1$v, which.min)
maxCon <- apply(svd1$v[,2], which.min)
maxCon <- apply(svd1$v[,2], which.min)
maxCon <- apply(svd1$v[,2], which.min())
maxCon <- apply(svd1$v,2, which.min)
maxCon <- apply(svd1$v,2, which.max)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12, maxCon] )
mdist <- dist(sub1[,c(10:12, maxCon)] )
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[1:561],centers = 6)
kClust <- kmeans(sub1[,1:561],centers = 6)
kmeans(sub1[, -c(562, 563)], centers = 6)
kClust <-kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
table(kClust$cluster, sub1$activity, nstart=100)
kClust <-kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch=19, ylab='Laying Cluster')
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch=19. ylab="Walkdown Cluster")
plot(kClust$centers[walkdown, 1:12], pch=19, ylab="Walkdown Cluster")
setwd('./Downloads/')
install.packages('lubridate')
setwd("/Volumes/Documents/Learning/Coursera_R_Assignments/Coursera_R_Assignments/Reproducible_Research_Project_1")
setwd("/Users/shuzhang/Downloads")
sessionInfo()
code()
setwd("/Users/shuzhang/Learn R")
setwd("/Volumes/Documents/Learning/Coursera_R_Assignments/Coursera_R_Assignments/R_Programming_Assignment_2")
getwd()
getwd()
setwd('../Reproducible_Research_Project_2/')
getwd()
# check if /data folder exists, if not create one
if (!file.exists("./data")) {
dir.create("data")
}
# Then check if StormData.csv.bz2 exists, if not download it
if (!file.exists("./data/StormData.csv.bz2")) {
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", "data/StormData.csv.bz2", method = "curl")
}
# Load data
storm <- read.csv("data/StormData.csv.bz2", header = TRUE, sep = ",", stringsAsFactors = FALSE)
View(storm)
storm_subset <- storm[, c("EVTYPE", "FATALITIES", "INJURIES")]
View(storm_subset)
storm_subset$POPULATION = storm_subset$FATALITIES + storm_subset$INJURIES
storm_subset <- aggregate(storm_subset$POPULATION, by = list(storm_subset$EVTYPE), FUN = sum)
storm_subset <- storm_subset[order(-storm_subset$x), ]
most_harmful <- storm_subset[1, ]
View(most_harmful)
most_harmful <- storm_subset[1, 1]
most_harmful <-library(ggplot2)
library(ggplot2)
top_10 <- storm_subset[1:10, ]
g<-ggplot(top_10)
g+geom_bar(stat = "identity")
top_10 <- storm_subset[1:10, ]
View(top_10)
View(storm_subset)
?aggregate
storm_subset <- aggregate(POPULATION~EVTYPE,data=storm_subset, FUN = sum)
View(storm_subset)
storm_subset <- storm[, c("EVTYPE", "FATALITIES", "INJURIES")]
storm_subset$POPULATION = storm_subset$FATALITIES + storm_subset$INJURIES
# group by event type and sum population
storm_subset <- aggregate(POPULATION~EVTYPE,data=storm_subset, FUN = sum)
storm_subset <- storm_subset[order(-storm_subset$POPULATION), ]
View(storm_subset)
View(storm_subset)
library(ggplot2)
top_10 <- storm_subset[1:10, ]
g <- qplot(x = EVTYPE, y = POPULATION, data = top_10, geom = "bar", stat = "identity", fill = EVTYPE) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
g <- qplot(x = EVTYPE, y = POPULATION, data = top_10, geom = "bar", stat = "identity", fill = EVTYPE)
g <- qplot(x = EVTYPE, y = POPULATION, data = top_10, geom = "bar",fill = EVTYPE)
g
g <- qplot(x = EVTYPE, y = POPULATION, data = top_10, geom = "bar",fill = EVTYPE) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
g <- ggplot(top_10, aes(x = reorder(EVTYPE, -POPULATION), y = POPULATION)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(x = "Event Type", y = "Population") + ggtitle("Top 10 Most Harmful Event Types with Respect to Population Health")
g
g <- ggplot(top_10, aes(x = reorderEVTYPE, y = POPULATION)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(x = "Event Type", y = "Population") + ggtitle("Top 10 Most Harmful Event Types with Respect to Population Health")
g <- ggplot(top_10, aes(x = EVTYPE, y = POPULATION)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(x = "Event Type", y = "Population") + ggtitle("Top 10 Most Harmful Event Types with Respect to Population Health")
g
?ggplot
?reorder
reorder(top_10$EVTYPE, -top_10$POPULATION)
# check if /data folder exists, if not create one
if (!file.exists("./data")) {
dir.create("data")
}
# Then check if StormData.csv.bz2 exists, if not download it
if (!file.exists("./data/StormData.csv.bz2")) {
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", "data/StormData.csv.bz2", method = "curl")
}
# Load data
storm <- read.csv("data/StormData.csv.bz2", header = TRUE, sep = ",", stringsAsFactors = FALSE)
g
# Which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?
# Create a subset of the data with only the columns we need
storm_subset <- storm[, c("EVTYPE", "FATALITIES", "INJURIES")]
storm_subset$POPULATION = storm_subset$FATALITIES + storm_subset$INJURIES
# group by event type and sum population
storm_subset <- aggregate(POPULATION~EVTYPE,data=storm_subset, FUN = sum)
# Sort by population in decreasing order
storm_subset <- storm_subset[order(-storm_subset$POPULATION), ]
most_harmful <-  storm_subset[1, 1]
# Plot the top 10 most harmful event types with respect to population health
top_10 <- storm_subset[1:10, ]
library(ggplot2)
g <- ggplot(top_10, aes(x = reorder(EVTYPE, -POPULATION), y = POPULATION))
g <- g + geom_bar(stat = "identity", color = "skyblue", fill = "blue")
g <- g + theme(axis.text.x = element_text(angle = 90, hjust = 1))
g<- g + labs(x = "Event Type", y = "Population") + ggtitle("Top 10 Most Harmful Event Types with Respect to Population Health")
# Which types of events have the greatest economic consequences?
# Plot the top 10 most harmful event types with respect to population health
top_10 <- storm_subset[1:10, ]
library(ggplot2)
g <- ggplot(top_10, aes(x = reorder(EVTYPE, -POPULATION), y = POPULATION))
g <- g + geom_bar(stat = "identity", color = "skyblue", fill = "blue")
g <- g + theme(axis.text.x = element_text(angle = 90, hjust = 1))
g <- g + labs(x = "Event Type", y = "Population") + ggtitle("Top 10 Most Harmful Event Types with Respect to Population Health")
g
View(storm)
View(storm)
